Write a function, canColor, that takes in an unordered_map representing the adjacency list of an undirected graph. The function should return a boolean indicating whether or not it is possible to color nodes of the graph using two colors in such a way that adjacent nodes are always different colors.

For example, given this graph:

x-y-z

It is possible to color the nodes by using red for x and z, 
then use blue for y. So the answer is true.

For example, given this graph:

    q
   / \
  s - r

It is not possible to color the nodes without making two 
adjacent nodes the same color. So the answer is 0 (false.)
test_00:
canColor(std::unordered_map<std::string, std::vector<std::string>> {
  { "x", {"y"} },
  { "y", {"x","z"} },
  { "z", {"y"} }
}); // -> 1 (true)
test_01:
canColor({
  { "q", {"r", "s"} },
  { "r", {"q", "s"} },
  { "s", {"r", "q"} }
}); // -> 0 (false)
test_02:
canColor({
  { "a", {"b", "c", "d"} },
  { "b", {"a"} },
  { "c", {"a"} },
  { "d", {"a"} }
}); // -> 1 (true)
test_03:
canColor({
  { "a", {"b", "c", "d"} },
  { "b", {"a"} },
  { "c", {"a", "d"} },
  { "d", {"a", "c"} }
}); // -> 0 (false)
test_04:
canColor({
  { "h", {"i", "k"} },
  { "i", {"h", "j"} },
  { "j", {"i", "k"} },
  { "k", {"h", "j"} }
}); // -> 1 (true)
test_05:
canColor({
  { "z", {} }
}); // -> 1 (true)
test_06:
canColor({
  { "h", {"i", "k"} },
  { "i", {"h", "j"} },
  { "j", {"i", "k"} },
  { "k", {"h", "j"} },
  { "q", {"r", "s"} },
  { "r", {"q", "s"} },
  { "s", {"r", "q"} }
}); // -> 0 (false)