build tree in pre
Write a function, buildTreeInPre, that takes in a vector of in-ordered values and a vector of pre-ordered values for a binary tree. The function should build a binary tree that has the given in-order and pre-order traversal structure. The function should return the root of this tree.

You can assume that the values of inorder and preorder are unique.

Be sure to allocate the nodes of your tree dynamically with the new keyword.

test_00
buildTreeInPre(
  std::vector<std::string> { "z", "y", "x" },
  std::vector<std::string> { "y", "z", "x" } 
);
//       y
//    /    \
//   z      x
test_01
buildTreeInPre(
  std::vector<std::string> { "y", "z", "x" },
  std::vector<std::string> { "y", "x", "z" } 
);
//       y
//        \
//         x
//        / 
//       z
test_02
buildTreeInPre(
  std::vector<std::string> { "d", "b", "g", "e", "h", "a", "c", "f" },
  std::vector<std::string> { "a", "b", "d", "e", "g", "h", "c", "f" } 
);
//       a
//    /    \
//   b      c
//  / \      \
// d   e      f
//    / \
//    g  h
test_03
buildTreeInPre(
  std::vector<std::string> { "t", "u", "s", "q", "r", "p" },
  std::vector<std::string> { "u", "t", "s", "r", "q", "p" } 
);
//     u
//  /    \
// t      s
//         \
//         r
//        / \
//        q  p
test_04
buildTreeInPre(
  std::vector<std::string> { "m", "l", "q", "o", "r", "n", "s", "p", "t" },
  std::vector<std::string> { "l", "m", "n", "o", "q", "r", "p", "s", "t" } 
);
//        l
//     /     \
//    m       n
//         /    \
//         o     p
//        / \   / \
//       q   r s   t