post order
Write a function, postOrder, that takes in the root of a binary tree. The function should return an array containing the post-ordered values of the tree.

Post-order traversal is when nodes are recursively visited in the order: left child, right child, self.

test_00:
Node x("x");
Node y("y");
Node z("z");

x.left = &y;
x.right = &z;

//       x
//    /    \
//   y      z

postOrder(&x);
// ["y", "z", "x"]
test_01:
Node a("a");
Node b("b");
Node c("c");
Node d("d");
Node e("e");
Node f("f");
Node g("g");

a.left = &b;
a.right = &c;
b.left = &d;
b.right = &e;
c.left = &f;
c.right = &g;
  
//      a
//    /    \
//   b      c
//  / \    / \
// d   e  f   g

postOrder(&a);
// [ "d", "e", "b", "f", "g", "c", "a" ] 
test_02:
 Node a("a");
 Node b("b");
 Node c("c");
 Node d("d");
 Node e("e");
 Node f("f");
 Node g("g");
 Node h("h");

a.left = &b;
a.right = &c;
b.left = &d;
b.right = &e;
c.right = &f;
e.left = &g;
e.right = &h;

//      a
//    /    \
//   b      c
//  / \      \
// d   e      f
//    / \
//    g  h

postOrder(&a);
// [ "d", "g", "h", "e", "b", "f", "c", "a" ] 
test_03:
Node l("l");
Node m("m");
Node n("n");
Node o("o");
Node p("p");
Node q("q");
Node r("r");
Node s("s");
Node t("t");

l.left = &m;
l.right = &n;
n.left = &o;
n.right = &p;
o.left = &q;
o.right = &r;
p.left = &s;
p.right = &t;

//        l
//     /     \
//    m       n
//         /    \
//         o     p
//        / \   / \
//       q   r s   t

postOrder(&l);
// [ "m", "q", "r", "o", "s", "t", "p", "n", "l" ] 
test_04:
postOrder(nullptr);
// []