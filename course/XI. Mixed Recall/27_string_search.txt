string search
Write a function, stringSearch, that takes in a grid of letters and a string as arguments. The function should return a boolean indicating whether or not the string can be found in the grid as a path by connecting horizontal or vertical positions. The path can begin at any position, but you cannot reuse a position more than once in the path.

You can assume that all letters are lowercase and alphabetic.

test_00:
std::vector<std::vector<char>> grid {
  {'e', 'y', 'h', 'i', 'j'},
  {'q', 'x', 'e', 'r', 'p'},
  {'r', 'o', 'l', 'l', 'n'},
  {'p', 'r', 'x', 'o', 'h'},
  {'a', 'a', 'm', 'c', 'm'}
};
stringSearch(grid, "hello"); // -> 1 (true)
test_01:
std::vector<std::vector<char>> grid {
  {'e', 'y', 'h', 'i', 'j'},
  {'q', 'x', 'e', 'r', 'p'},
  {'r', 'o', 'l', 'l', 'n'},
  {'p', 'r', 'x', 'o', 'h'},
  {'a', 'a', 'm', 'c', 'm'}
};
stringSearch(grid, "proxy"); // -> 1 (true)
test_02:
std::vector<std::vector<char>> grid {
  {'e', 'y', 'h', 'i', 'j'},
  {'q', 'x', 'e', 'r', 'p'},
  {'r', 'o', 'l', 'l', 'n'},
  {'p', 'r', 'x', 'o', 'h'},
  {'a', 'a', 'm', 'c', 'm'}
};
stringSearch(grid, "rolling"); // -> 0 (false)
test_03:
std::vector<std::vector<char>> grid {
  {'e', 'y', 'h', 'i', 'j'},
  {'q', 'x', 'e', 'r', 'p'},
  {'r', 'o', 'l', 'l', 'n'},
  {'p', 'r', 'x', 'o', 'h'},
  {'a', 'a', 'm', 'z', 'm'}
};
stringSearch(grid, "zoo"); // -> 0 (false)
test_04:
std::vector<std::vector<char>> grid {
  {'q', 'w', 'h', 'i', 'j'},
  {'q', 'e', 'r', 'o', 'p'},
  {'h', 'y', 't', 'x', 'z'},
  {'k', 'o', 'm', 'o', 'p'}
};
stringSearch(grid, "qwerty"); // -> 1 (true)
test_05:
std::vector<std::vector<char>> grid {
  { 'f', 'd', 'i', 'e', 'l', 'u', 'j', 't', 'q', 'v', 'o', 'p' }, 
  { 'o', 'p', 'b', 'e', 'm', 'w', 'm', 'l', 'h', 'j', 's', 'v' }, 
  { 'g', 'b', 's', 'm', 'i', 'w', 'w', 'h', 'l', 'm', 'l', 'n' }, 
  { 'a', 'l', 's', 'k', 'p', 'c', 't', 'u', 'v', 'b', 'c', 'm' }, 
  { 'm', 't', 'c', 'k', 'e', 'n', 'r', 'b', 'a', 'z', 'l', 'c' }, 
  { 'q', 'm', 'a', 'p', 'a', 'p', 'i', 'i', 'u', 't', 'z', 'z' }, 
  { 'd', 'u', 'z', 'o', 'e', 'r', 'a', 't', 't', 'c', 'q', 'k' }, 
  { 'f', 'u', 'z', 'g', 'c', 'i', 'k', 'v', 'o', 'f', 's', 'w' }, 
  { 'p', 'h', 'u', 'i', 'k', 'c', 'v', 'v', 'h', 'q', 'v', 'i' }, 
  { 'l', 'q', 'w', 'f', 'y', 'g', 'w', 'f', 'a', 'u', 'x', 'q' } 
};
stringSearch(grid, "paprika"); // -> 1 (true)
test_06:
std::vector<std::vector<char>> grid {
    { 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's' },
    { 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's' },
    { 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's' },
    { 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's' },
    { 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's' },
    { 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's' },
    { 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's' },
    { 's', 's', 's', 's', 's', 's', 's', 's', 's', 'x', 'x' },
    { 's', 's', 's', 's', 's', 's', 's', 's', 's', 'x', 'h' },
};
stringSearch(grid, "sssssssh"); // -> 0 (false)