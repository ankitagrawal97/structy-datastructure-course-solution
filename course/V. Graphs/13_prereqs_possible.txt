prereqs possible
Write a function, prereqsPossible, that takes in a number of courses (n) and prerequisites as arguments. Courses have ids ranging from 0 through n - 1. A single prerequisite of {A, B} means that course A must be taken before course B. The function should return a boolean indicating whether or not it is possible to complete all courses.

test_00:
int numCourses = 6;
std::vector<std::tuple<int, int>> prereqs {
  {0, 1},
  {2, 3},
  {0, 2},
  {1, 3},
  {4, 5}
};
prereqsPossible(numCourses, prereqs); // -> 1 (true)
test_01:
int numCourses = 6;
std::vector<std::tuple<int, int>> prereqs {
  {0, 1},
  {2, 3},
  {0, 2},
  {1, 3},
  {4, 5},
  {3, 0}
};
prereqsPossible(numCourses, prereqs); // -> 0 (false)
test_02:
int numCourses = 5;
std::vector<std::tuple<int, int>> prereqs {
  {2, 4},
  {1, 0},
  {0, 2},
  {0, 4}
};
prereqsPossible(numCourses, prereqs); // -> 1 (true)
test_03:
int numCourses = 6;
std::vector<std::tuple<int, int>> prereqs {
  {2, 4},
  {1, 0},
  {0, 2},
  {0, 4},
  {5, 3},
  {3, 5}
};
prereqsPossible(numCourses, prereqs); // -> 0 (false)
test_04:
int numCourses = 8;
std::vector<std::tuple<int, int>> prereqs {
  {1, 0},
  {0, 6},
  {2, 0},
  {0, 5},
  {3, 7},
  {4, 3}
};
prereqsPossible(numCourses, prereqs); // -> 1 (true)
test_05:
int numCourses = 8;
std::vector<std::tuple<int, int>> prereqs {
  {1, 0},
  {0, 6},
  {2, 0},
  {0, 5},
  {3, 7},
  {7, 4},
  {4, 3}
};
prereqsPossible(numCourses, prereqs); // -> 0 (false)
test_06:
int numCourses = 42;
std::vector<std::tuple<int, int>> prereqs {{6, 36}};
prereqsPossible(numCourses, prereqs); // -> 1 (true)