has cycle
Write a function, hasCycle, that takes in an unordered map representing the adjacency list of a directed graph. The function should return a boolean indicating whether or not the graph contains a cycle.

test_00:
std::unordered_map<char, std::vector<char>> graph {
  { 'a', {'b'} },
  { 'b', {'c'} },
  { 'c', {'a'} }
};
hasCycle(graph); // -> 1 (true)
test_01:
std::unordered_map<char, std::vector<char>> graph {
  { 'a', {'b', 'c'} },
  { 'b', {'c'} },
  { 'c', {'d'} },
  { 'd', {} }
};
hasCycle(graph); // -> 0 (false)
test_02:
std::unordered_map<char, std::vector<char>> graph {
  { 'a', {'b', 'c'} },
  { 'b', {} },
  { 'c', {} },
  { 'e', {'f'} },
  { 'f', {'e'} }
};
hasCycle(graph); // -> 1 (true)
test_03:
std::unordered_map<char, std::vector<char>> graph {
  { 'q', {'r', 's'} },
  { 'r', {'t', 'u'} },
  { 's', {} },
  { 't', {} },
  { 'u', {} },
  { 'v', {'w'} },
  { 'w', {} },
  { 'x', {'w'} }
};
hasCycle(graph); // -> 0 (false)
test_04:
std::unordered_map<char, std::vector<char>> graph {
  { 'a', {'b'} },
  { 'b', {'c'} },
  { 'c', {'a'} },
  { 'g', {} }
};
hasCycle(graph); // -> 1 (true)
test_05:
std::unordered_map<char, std::vector<char>> graph {
  { 'a', {'b'} },
  { 'b', {'c'} },
  { 'c', {'d'} },
  { 'd', {'b'} }
};
hasCycle(graph); // -> 1 (true)